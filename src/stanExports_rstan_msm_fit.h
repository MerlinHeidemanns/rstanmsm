// Generated by rstantools.  Do not edit by hand.

/*
    rstanmsm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanmsm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanmsm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_rstan_msm_fit_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_rstan_msm_fit");
    reader.add_event(103, 101, "end", "model_rstan_msm_fit");
    return reader;
}
#include <stan_meta_header.hpp>
class model_rstan_msm_fit : public prob_grad {
private:
        int N;
        int T;
        int NT;
        std::vector<std::vector<int> > startstop;
        int K;
        int Md_sha;
        int Md_var;
        int Mc_sha;
        int Mc_var;
        matrix_d z_sha;
        matrix_d z_var;
        matrix_d x_sha;
        matrix_d x_var;
        vector_d y;
public:
    model_rstan_msm_fit(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_rstan_msm_fit(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_rstan_msm_fit_namespace::model_rstan_msm_fit";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 2);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "NT", "int", context__.to_vec());
            NT = int(0);
            vals_i__ = context__.vals_i("NT");
            pos__ = 0;
            NT = vals_i__[pos__++];
            check_greater_or_equal(function__, "NT", NT, (N * T));
            current_statement_begin__ = 6;
            validate_non_negative_index("startstop", "N", N);
            validate_non_negative_index("startstop", "2", 2);
            context__.validate_dims("data initialization", "startstop", "int", context__.to_vec(N,2));
            startstop = std::vector<std::vector<int> >(N, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("startstop");
            pos__ = 0;
            size_t startstop_k_0_max__ = N;
            size_t startstop_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < startstop_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < startstop_k_0_max__; ++k_0__) {
                    startstop[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 2);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "Md_sha", "int", context__.to_vec());
            Md_sha = int(0);
            vals_i__ = context__.vals_i("Md_sha");
            pos__ = 0;
            Md_sha = vals_i__[pos__++];
            check_greater_or_equal(function__, "Md_sha", Md_sha, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "Md_var", "int", context__.to_vec());
            Md_var = int(0);
            vals_i__ = context__.vals_i("Md_var");
            pos__ = 0;
            Md_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "Md_var", Md_var, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "Mc_sha", "int", context__.to_vec());
            Mc_sha = int(0);
            vals_i__ = context__.vals_i("Mc_sha");
            pos__ = 0;
            Mc_sha = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mc_sha", Mc_sha, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "Mc_var", "int", context__.to_vec());
            Mc_var = int(0);
            vals_i__ = context__.vals_i("Mc_var");
            pos__ = 0;
            Mc_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mc_var", Mc_var, 0);
            current_statement_begin__ = 16;
            validate_non_negative_index("z_sha", "NT", NT);
            validate_non_negative_index("z_sha", "Md_sha", Md_sha);
            context__.validate_dims("data initialization", "z_sha", "matrix_d", context__.to_vec(NT,Md_sha));
            z_sha = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Md_sha);
            vals_r__ = context__.vals_r("z_sha");
            pos__ = 0;
            size_t z_sha_j_2_max__ = Md_sha;
            size_t z_sha_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < z_sha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_sha_j_1_max__; ++j_1__) {
                    z_sha(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("z_var", "NT", NT);
            validate_non_negative_index("z_var", "Md_var", Md_var);
            context__.validate_dims("data initialization", "z_var", "matrix_d", context__.to_vec(NT,Md_var));
            z_var = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Md_var);
            vals_r__ = context__.vals_r("z_var");
            pos__ = 0;
            size_t z_var_j_2_max__ = Md_var;
            size_t z_var_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < z_var_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_var_j_1_max__; ++j_1__) {
                    z_var(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("x_sha", "NT", NT);
            validate_non_negative_index("x_sha", "Mc_sha", Mc_sha);
            context__.validate_dims("data initialization", "x_sha", "matrix_d", context__.to_vec(NT,Mc_sha));
            x_sha = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mc_sha);
            vals_r__ = context__.vals_r("x_sha");
            pos__ = 0;
            size_t x_sha_j_2_max__ = Mc_sha;
            size_t x_sha_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < x_sha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_sha_j_1_max__; ++j_1__) {
                    x_sha(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("x_var", "NT", NT);
            validate_non_negative_index("x_var", "Mc_var", Mc_var);
            context__.validate_dims("data initialization", "x_var", "matrix_d", context__.to_vec(NT,Mc_var));
            x_var = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mc_var);
            vals_r__ = context__.vals_r("x_var");
            pos__ = 0;
            size_t x_var_j_2_max__ = Mc_var;
            size_t x_var_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < x_var_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_var_j_1_max__; ++j_1__) {
                    x_var(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("y", "NT", NT);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(NT));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(NT);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = NT;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 30;
            validate_non_negative_index("pi1", "K", K);
            validate_non_negative_index("pi1", "N", N);
            num_params_r__ += ((K - 1) * N);
            current_statement_begin__ = 31;
            validate_non_negative_index("gamma", "Md_sha", Md_sha);
            num_params_r__ += Md_sha;
            current_statement_begin__ = 32;
            validate_non_negative_index("lambda", "Md_var", Md_var);
            validate_non_negative_index("lambda", "K", K);
            num_params_r__ += (Md_var * K);
            current_statement_begin__ = 35;
            validate_non_negative_index("mu", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 36;
            validate_non_negative_index("phi", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 37;
            validate_non_negative_index("zeta", "Mc_sha", Mc_sha);
            num_params_r__ += Mc_sha;
            current_statement_begin__ = 38;
            validate_non_negative_index("beta", "Mc_var", Mc_var);
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += (Mc_var * K);
            current_statement_begin__ = 39;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_rstan_msm_fit() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 30;
        if (!(context__.contains_r("pi1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi1");
        pos__ = 0U;
        validate_non_negative_index("pi1", "K", K);
        validate_non_negative_index("pi1", "N", N);
        context__.validate_dims("parameter initialization", "pi1", "vector_d", context__.to_vec(N,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi1(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                pi1[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t pi1_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < pi1_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(pi1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "Md_sha", Md_sha);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(Md_sha));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(Md_sha);
        size_t gamma_j_1_max__ = Md_sha;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "Md_var", Md_var);
        validate_non_negative_index("lambda", "K", K);
        context__.validate_dims("parameter initialization", "lambda", "matrix_d", context__.to_vec(Md_var,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda(Md_var, K);
        size_t lambda_j_2_max__ = K;
        size_t lambda_j_1_max__ = Md_var;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                lambda(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "K", K);
        context__.validate_dims("parameter initialization", "mu", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu(K);
        size_t mu_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "K", K);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(K);
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("zeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "Mc_sha", Mc_sha);
        context__.validate_dims("parameter initialization", "zeta", "vector_d", context__.to_vec(Mc_sha));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta(Mc_sha);
        size_t zeta_j_1_max__ = Mc_sha;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            zeta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "Mc_var", Mc_var);
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "matrix_d", context__.to_vec(Mc_var,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(Mc_var, K);
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = Mc_var;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                beta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 30;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pi1;
            size_t pi1_d_0_max__ = N;
            pi1.reserve(pi1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pi1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pi1.push_back(in__.simplex_constrain(K, lp__));
                else
                    pi1.push_back(in__.simplex_constrain(K));
            }
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_constrain(Md_sha, lp__);
            else
                gamma = in__.vector_constrain(Md_sha);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.matrix_constrain(Md_var, K, lp__);
            else
                lambda = in__.matrix_constrain(Md_var, K);
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.ordered_constrain(K, lp__);
            else
                mu = in__.ordered_constrain(K);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.ordered_constrain(K, lp__);
            else
                phi = in__.ordered_constrain(K);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_constrain(Mc_sha, lp__);
            else
                zeta = in__.vector_constrain(Mc_sha);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(Mc_var, K, lp__);
            else
                beta = in__.matrix_constrain(Mc_var, K);
            current_statement_begin__ = 39;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("logalpha", "2", 2);
            validate_non_negative_index("logalpha", "T", T);
            validate_non_negative_index("logalpha", "N", N);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > logalpha(T, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(2)));
            stan::math::initialize(logalpha, DUMMY_VAR__);
            stan::math::fill(logalpha, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("A", "2", 2);
            validate_non_negative_index("A", "N", N);
            validate_non_negative_index("A", "T", T);
            validate_non_negative_index("A", "2", 2);
            std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > > A(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > >(T, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> >(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(2))));
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 45;
            for (int nn = 1; nn <= N; ++nn) {
                current_statement_begin__ = 46;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 47;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())))), 
                                normal_cdf((multiply(get_base1(z_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_sha", 1), gamma) + multiply(get_base1(z_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_var", 1), stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "lambda"))), 0, 1), 
                                "assigning variable A");
                    current_statement_begin__ = 49;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())))), 
                                normal_cdf((multiply(get_base1(z_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_sha", 1), gamma) + multiply(get_base1(z_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_var", 1), stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "lambda"))), 0, 1), 
                                "assigning variable A");
                    current_statement_begin__ = 51;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())))), 
                                (1 - get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), 1, "A", 3), 1, "A", 4)), 
                                "assigning variable A");
                    current_statement_begin__ = 52;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())))), 
                                (1 - get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), 2, "A", 3), 2, "A", 4)), 
                                "assigning variable A");
                }
            }
            current_statement_begin__ = 60;
            for (int nn = 1; nn <= N; ++nn) {
                current_statement_begin__ = 61;
                for (int j = 1; j <= 2; ++j) {
                    current_statement_begin__ = 62;
                    stan::model::assign(logalpha, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                (stan::math::log(get_base1(get_base1(pi1, nn, "pi1", 1), j, "pi1", 2)) + normal_log(get_base1(y, get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2), "y", 1), get_base1(mu, j, "mu", 1), sigma)), 
                                "assigning variable logalpha");
                }
                current_statement_begin__ = 64;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 65;
                    for (int j = 1; j <= 2; ++j) {
                        {
                        current_statement_begin__ = 66;
                        validate_non_negative_index("accumulator", "2", 2);
                        std::vector<local_scalar_t__  > accumulator(2, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(accumulator, DUMMY_VAR__);
                        stan::math::fill(accumulator, DUMMY_VAR__);
                        current_statement_begin__ = 67;
                        for (int i = 1; i <= 2; ++i) {
                            current_statement_begin__ = 68;
                            stan::model::assign(accumulator, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(get_base1(get_base1(logalpha, (t - 1), "logalpha", 1), nn, "logalpha", 2), i, "logalpha", 3) + stan::math::log(get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), i, "A", 3), j, "A", 4))) + normal_log(get_base1(y, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "y", 1), (((get_base1(mu, j, "mu", 1) + (get_base1(y, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 2), "y", 1) * get_base1(phi, j, "phi", 1))) + multiply(get_base1(x_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "x_sha", 1), zeta)) + multiply(get_base1(x_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "x_var", 1), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "beta"))), sigma)), 
                                        "assigning variable accumulator");
                        }
                        current_statement_begin__ = 75;
                        stan::model::assign(logalpha, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                    log_sum_exp(accumulator), 
                                    "assigning variable logalpha");
                        }
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            size_t logalpha_k_0_max__ = T;
            size_t logalpha_k_1_max__ = N;
            size_t logalpha_j_1_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < logalpha_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                        if (stan::math::is_uninitialized(logalpha[k_0__][k_1__](j_1__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: logalpha" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logalpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 44;
            size_t A_k_0_max__ = N;
            size_t A_k_1_max__ = T;
            size_t A_k_2_max__ = 2;
            size_t A_j_1_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                    for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                            if (stan::math::is_uninitialized(A[k_0__][k_1__][k_2__](j_1__))) {
                                std::stringstream msg__;
                                msg__ << "Undefined transformed parameter: A" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "[" << k_2__ << "]" << "(" << j_1__ << ")";
                                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable A: ") + msg__.str()), current_statement_begin__, prog_reader__());
                            }
                        }
                    }
                }
            }
            size_t A_i_0_max__ = N;
            size_t A_i_1_max__ = T;
            size_t A_i_2_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < A_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < A_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < A_i_2_max__; ++i_2__) {
                        stan::math::check_simplex(function__, "A[i_0__][i_1__][i_2__]", A[i_0__][i_1__][i_2__]);
                    }
                }
            }
            // model body
            current_statement_begin__ = 84;
            lp_accum__.add(normal_log(mu, 0, 4));
            current_statement_begin__ = 85;
            lp_accum__.add(normal_log(phi, 0.5, 0.25));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log(gamma, 0, 0.5));
            current_statement_begin__ = 89;
            lp_accum__.add(normal_log(zeta, 0, 4));
            current_statement_begin__ = 92;
            for (int i = 1; i <= 2; ++i) {
                current_statement_begin__ = 93;
                lp_accum__.add(normal_log(stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "lambda"), 0, 2));
                current_statement_begin__ = 94;
                lp_accum__.add(normal_log(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta"), 0, 5));
            }
            current_statement_begin__ = 98;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 99;
                lp_accum__.add(log_sum_exp(get_base1(get_base1(logalpha, T, "logalpha", 1), n, "logalpha", 2)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi1");
        names__.push_back("gamma");
        names__.push_back("lambda");
        names__.push_back("mu");
        names__.push_back("phi");
        names__.push_back("zeta");
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("logalpha");
        names__.push_back("A");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Md_sha);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Md_var);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mc_sha);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mc_var);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(N);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(T);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_rstan_msm_fit_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi1;
        size_t pi1_d_0_max__ = N;
        pi1.reserve(pi1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pi1_d_0_max__; ++d_0__) {
            pi1.push_back(in__.simplex_constrain(K));
        }
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                vars__.push_back(pi1[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_constrain(Md_sha);
        size_t gamma_j_1_max__ = Md_sha;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda = in__.matrix_constrain(Md_var, K);
        size_t lambda_j_2_max__ = K;
        size_t lambda_j_1_max__ = Md_var;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                vars__.push_back(lambda(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu = in__.ordered_constrain(K);
        size_t mu_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            vars__.push_back(mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.ordered_constrain(K);
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta = in__.vector_constrain(Mc_sha);
        size_t zeta_j_1_max__ = Mc_sha;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            vars__.push_back(zeta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta = in__.matrix_constrain(Mc_var, K);
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = Mc_var;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                vars__.push_back(beta(j_1__, j_2__));
            }
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("logalpha", "2", 2);
            validate_non_negative_index("logalpha", "T", T);
            validate_non_negative_index("logalpha", "N", N);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > logalpha(T, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(2)));
            stan::math::initialize(logalpha, DUMMY_VAR__);
            stan::math::fill(logalpha, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("A", "2", 2);
            validate_non_negative_index("A", "N", N);
            validate_non_negative_index("A", "T", T);
            validate_non_negative_index("A", "2", 2);
            std::vector<std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > > A(N, std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > >(T, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(2, Eigen::Matrix<double, Eigen::Dynamic, 1>(2))));
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 45;
            for (int nn = 1; nn <= N; ++nn) {
                current_statement_begin__ = 46;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 47;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())))), 
                                normal_cdf((multiply(get_base1(z_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_sha", 1), gamma) + multiply(get_base1(z_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_var", 1), stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "lambda"))), 0, 1), 
                                "assigning variable A");
                    current_statement_begin__ = 49;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())))), 
                                normal_cdf((multiply(get_base1(z_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_sha", 1), gamma) + multiply(get_base1(z_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "z_var", 1), stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "lambda"))), 0, 1), 
                                "assigning variable A");
                    current_statement_begin__ = 51;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())))), 
                                (1 - get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), 1, "A", 3), 1, "A", 4)), 
                                "assigning variable A");
                    current_statement_begin__ = 52;
                    stan::model::assign(A, 
                                stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())))), 
                                (1 - get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), 2, "A", 3), 2, "A", 4)), 
                                "assigning variable A");
                }
            }
            current_statement_begin__ = 60;
            for (int nn = 1; nn <= N; ++nn) {
                current_statement_begin__ = 61;
                for (int j = 1; j <= 2; ++j) {
                    current_statement_begin__ = 62;
                    stan::model::assign(logalpha, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                (stan::math::log(get_base1(get_base1(pi1, nn, "pi1", 1), j, "pi1", 2)) + normal_log(get_base1(y, get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2), "y", 1), get_base1(mu, j, "mu", 1), sigma)), 
                                "assigning variable logalpha");
                }
                current_statement_begin__ = 64;
                for (int t = 2; t <= T; ++t) {
                    current_statement_begin__ = 65;
                    for (int j = 1; j <= 2; ++j) {
                        {
                        current_statement_begin__ = 66;
                        validate_non_negative_index("accumulator", "2", 2);
                        std::vector<local_scalar_t__  > accumulator(2, local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(accumulator, DUMMY_VAR__);
                        stan::math::fill(accumulator, DUMMY_VAR__);
                        current_statement_begin__ = 67;
                        for (int i = 1; i <= 2; ++i) {
                            current_statement_begin__ = 68;
                            stan::model::assign(accumulator, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        ((get_base1(get_base1(get_base1(logalpha, (t - 1), "logalpha", 1), nn, "logalpha", 2), i, "logalpha", 3) + stan::math::log(get_base1(get_base1(get_base1(get_base1(A, nn, "A", 1), t, "A", 2), i, "A", 3), j, "A", 4))) + normal_log(get_base1(y, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "y", 1), (((get_base1(mu, j, "mu", 1) + (get_base1(y, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 2), "y", 1) * get_base1(phi, j, "phi", 1))) + multiply(get_base1(x_sha, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "x_sha", 1), zeta)) + multiply(get_base1(x_var, ((get_base1(get_base1(startstop, nn, "startstop", 1), 1, "startstop", 2) + t) - 1), "x_var", 1), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "beta"))), sigma)), 
                                        "assigning variable accumulator");
                        }
                        current_statement_begin__ = 75;
                        stan::model::assign(logalpha, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(nn), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                    log_sum_exp(accumulator), 
                                    "assigning variable logalpha");
                        }
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            size_t A_i_0_max__ = N;
            size_t A_i_1_max__ = T;
            size_t A_i_2_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < A_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < A_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < A_i_2_max__; ++i_2__) {
                        stan::math::check_simplex(function__, "A[i_0__][i_1__][i_2__]", A[i_0__][i_1__][i_2__]);
                    }
                }
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t logalpha_j_1_max__ = 2;
                size_t logalpha_k_0_max__ = T;
                size_t logalpha_k_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < logalpha_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                            vars__.push_back(logalpha[k_0__][k_1__](j_1__));
                        }
                    }
                }
                size_t A_j_1_max__ = 2;
                size_t A_k_0_max__ = N;
                size_t A_k_1_max__ = T;
                size_t A_k_2_max__ = 2;
                for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                    for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                        for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                            for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                                vars__.push_back(A[k_0__][k_1__][k_2__](j_1__));
                            }
                        }
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_rstan_msm_fit";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_j_1_max__ = Md_sha;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_2_max__ = K;
        size_t lambda_j_1_max__ = Md_var;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = Mc_sha;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = Mc_var;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logalpha_j_1_max__ = 2;
            size_t logalpha_k_0_max__ = T;
            size_t logalpha_k_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < logalpha_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "logalpha" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t A_j_1_max__ = 2;
            size_t A_k_0_max__ = N;
            size_t A_k_1_max__ = T;
            size_t A_k_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                    for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                            param_name_stream__.str(std::string());
                            param_name_stream__ << "A" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1 << '.' << j_1__ + 1;
                            param_names__.push_back(param_name_stream__.str());
                        }
                    }
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi1_j_1_max__ = (K - 1);
        size_t pi1_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_j_1_max__ = Md_sha;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_2_max__ = K;
        size_t lambda_j_1_max__ = Md_var;
        for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = Mc_sha;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_2_max__ = K;
        size_t beta_j_1_max__ = Mc_var;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logalpha_j_1_max__ = 2;
            size_t logalpha_k_0_max__ = T;
            size_t logalpha_k_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < logalpha_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "logalpha" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t A_j_1_max__ = (2 - 1);
            size_t A_k_0_max__ = N;
            size_t A_k_1_max__ = T;
            size_t A_k_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                    for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                            param_name_stream__.str(std::string());
                            param_name_stream__ << "A" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1 << '.' << j_1__ + 1;
                            param_names__.push_back(param_name_stream__.str());
                        }
                    }
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_rstan_msm_fit_namespace::model_rstan_msm_fit stan_model;
#endif
