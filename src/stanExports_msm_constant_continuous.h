// Generated by rstantools.  Do not edit by hand.

/*
    rstanmsm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanmsm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanmsm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_msm_constant_continuous_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_msm_constant_continuous");
    reader.add_event(307, 305, "end", "model_msm_constant_continuous");
    return reader;
}
#include <stan_meta_header.hpp>
class model_msm_constant_continuous : public prob_grad {
private:
        int N;
        int T;
        int NT;
        int NS;
        int NTP;
        std::vector<int> id_tp;
        std::vector<std::vector<int> > slicer_T;
        std::vector<std::vector<int> > startstop;
        int K;
        std::vector<int> has_intercept;
        int Mz;
        int Mx_d;
        int Mx_e;
        int pp1;
        int pp2;
        int pp3;
        std::vector<std::vector<int> > pp_lambda;
        std::vector<int> pp_gamma;
        std::vector<int> pp_eta;
        matrix_d z;
        matrix_d x_d;
        matrix_d x_e;
        vector_d y;
        int state_sigma;
        int tvtp;
        std::vector<int> order_x_e;
        vector_d A_prior;
        std::vector<std::vector<double> > priors;
        std::vector<double> id_miss;
        int Mz_;
        int Mx_d_;
        int Mx_e_;
        matrix_d z_;
        matrix_d x_d_;
        matrix_d x_e_;
        int pp1_;
        int pp2_;
        int pp3_;
        matrix_d pp_lambda_;
        vector_d pp_gamma_;
        int Mx_e_un;
        int Mx_e_ord;
        int K_sigma;
        int T_;
public:
    model_msm_constant_continuous(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_msm_constant_continuous(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_msm_constant_continuous_namespace::model_msm_constant_continuous";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 2);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "NT", "int", context__.to_vec());
            NT = int(0);
            vals_i__ = context__.vals_i("NT");
            pos__ = 0;
            NT = vals_i__[pos__++];
            check_greater_or_equal(function__, "NT", NT, N);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "NS", "int", context__.to_vec());
            NS = int(0);
            vals_i__ = context__.vals_i("NS");
            pos__ = 0;
            NS = vals_i__[pos__++];
            check_greater_or_equal(function__, "NS", NS, 1);
            check_less_or_equal(function__, "NS", NS, N);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "NTP", "int", context__.to_vec());
            NTP = int(0);
            vals_i__ = context__.vals_i("NTP");
            pos__ = 0;
            NTP = vals_i__[pos__++];
            check_greater_or_equal(function__, "NTP", NTP, 1);
            check_less_or_equal(function__, "NTP", NTP, NS);
            current_statement_begin__ = 10;
            validate_non_negative_index("id_tp", "NS", NS);
            context__.validate_dims("data initialization", "id_tp", "int", context__.to_vec(NS));
            id_tp = std::vector<int>(NS, int(0));
            vals_i__ = context__.vals_i("id_tp");
            pos__ = 0;
            size_t id_tp_k_0_max__ = NS;
            for (size_t k_0__ = 0; k_0__ < id_tp_k_0_max__; ++k_0__) {
                id_tp[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("slicer_T", "NS", NS);
            validate_non_negative_index("slicer_T", "2", 2);
            context__.validate_dims("data initialization", "slicer_T", "int", context__.to_vec(NS,2));
            slicer_T = std::vector<std::vector<int> >(NS, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("slicer_T");
            pos__ = 0;
            size_t slicer_T_k_0_max__ = NS;
            size_t slicer_T_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < slicer_T_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < slicer_T_k_0_max__; ++k_0__) {
                    slicer_T[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t slicer_T_i_0_max__ = NS;
            size_t slicer_T_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < slicer_T_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < slicer_T_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "slicer_T[i_0__][i_1__]", slicer_T[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("startstop", "T", T);
            validate_non_negative_index("startstop", "(NS * 2)", (NS * 2));
            context__.validate_dims("data initialization", "startstop", "int", context__.to_vec(T,(NS * 2)));
            startstop = std::vector<std::vector<int> >(T, std::vector<int>((NS * 2), int(0)));
            vals_i__ = context__.vals_i("startstop");
            pos__ = 0;
            size_t startstop_k_0_max__ = T;
            size_t startstop_k_1_max__ = (NS * 2);
            for (size_t k_1__ = 0; k_1__ < startstop_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < startstop_k_0_max__; ++k_0__) {
                    startstop[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 2);
            current_statement_begin__ = 16;
            validate_non_negative_index("has_intercept", "5", 5);
            context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec(5));
            has_intercept = std::vector<int>(5, int(0));
            vals_i__ = context__.vals_i("has_intercept");
            pos__ = 0;
            size_t has_intercept_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < has_intercept_k_0_max__; ++k_0__) {
                has_intercept[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "Mz", "int", context__.to_vec());
            Mz = int(0);
            vals_i__ = context__.vals_i("Mz");
            pos__ = 0;
            Mz = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mz", Mz, 0);
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "Mx_d", "int", context__.to_vec());
            Mx_d = int(0);
            vals_i__ = context__.vals_i("Mx_d");
            pos__ = 0;
            Mx_d = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mx_d", Mx_d, 0);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "Mx_e", "int", context__.to_vec());
            Mx_e = int(0);
            vals_i__ = context__.vals_i("Mx_e");
            pos__ = 0;
            Mx_e = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mx_e", Mx_e, 0);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "pp1", "int", context__.to_vec());
            pp1 = int(0);
            vals_i__ = context__.vals_i("pp1");
            pos__ = 0;
            pp1 = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "pp2", "int", context__.to_vec());
            pp2 = int(0);
            vals_i__ = context__.vals_i("pp2");
            pos__ = 0;
            pp2 = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "pp3", "int", context__.to_vec());
            pp3 = int(0);
            vals_i__ = context__.vals_i("pp3");
            pos__ = 0;
            pp3 = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("pp_lambda", "3", 3);
            validate_non_negative_index("pp_lambda", "Mz", Mz);
            context__.validate_dims("data initialization", "pp_lambda", "int", context__.to_vec(3,Mz));
            pp_lambda = std::vector<std::vector<int> >(3, std::vector<int>(Mz, int(0)));
            vals_i__ = context__.vals_i("pp_lambda");
            pos__ = 0;
            size_t pp_lambda_k_0_max__ = 3;
            size_t pp_lambda_k_1_max__ = Mz;
            for (size_t k_1__ = 0; k_1__ < pp_lambda_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pp_lambda_k_0_max__; ++k_0__) {
                    pp_lambda[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t pp_lambda_i_0_max__ = 3;
            size_t pp_lambda_i_1_max__ = Mz;
            for (size_t i_0__ = 0; i_0__ < pp_lambda_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < pp_lambda_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "pp_lambda[i_0__][i_1__]", pp_lambda[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "pp_lambda[i_0__][i_1__]", pp_lambda[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("pp_gamma", "pp2", pp2);
            context__.validate_dims("data initialization", "pp_gamma", "int", context__.to_vec(pp2));
            pp_gamma = std::vector<int>(pp2, int(0));
            vals_i__ = context__.vals_i("pp_gamma");
            pos__ = 0;
            size_t pp_gamma_k_0_max__ = pp2;
            for (size_t k_0__ = 0; k_0__ < pp_gamma_k_0_max__; ++k_0__) {
                pp_gamma[k_0__] = vals_i__[pos__++];
            }
            size_t pp_gamma_i_0_max__ = pp2;
            for (size_t i_0__ = 0; i_0__ < pp_gamma_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pp_gamma[i_0__]", pp_gamma[i_0__], 0);
                check_less_or_equal(function__, "pp_gamma[i_0__]", pp_gamma[i_0__], 1);
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("pp_eta", "pp2", pp2);
            context__.validate_dims("data initialization", "pp_eta", "int", context__.to_vec(pp2));
            pp_eta = std::vector<int>(pp2, int(0));
            vals_i__ = context__.vals_i("pp_eta");
            pos__ = 0;
            size_t pp_eta_k_0_max__ = pp2;
            for (size_t k_0__ = 0; k_0__ < pp_eta_k_0_max__; ++k_0__) {
                pp_eta[k_0__] = vals_i__[pos__++];
            }
            size_t pp_eta_i_0_max__ = pp2;
            for (size_t i_0__ = 0; i_0__ < pp_eta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pp_eta[i_0__]", pp_eta[i_0__], 0);
                check_less_or_equal(function__, "pp_eta[i_0__]", pp_eta[i_0__], 1);
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("z", "(NTP * T)", (NTP * T));
            validate_non_negative_index("z", "Mz", Mz);
            context__.validate_dims("data initialization", "z", "matrix_d", context__.to_vec((NTP * T),Mz));
            z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((NTP * T), Mz);
            vals_r__ = context__.vals_r("z");
            pos__ = 0;
            size_t z_j_2_max__ = Mz;
            size_t z_j_1_max__ = (NTP * T);
            for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                    z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("x_d", "NT", NT);
            validate_non_negative_index("x_d", "Mx_d", Mx_d);
            context__.validate_dims("data initialization", "x_d", "matrix_d", context__.to_vec(NT,Mx_d));
            x_d = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mx_d);
            vals_r__ = context__.vals_r("x_d");
            pos__ = 0;
            size_t x_d_j_2_max__ = Mx_d;
            size_t x_d_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < x_d_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_d_j_1_max__; ++j_1__) {
                    x_d(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("x_e", "NT", NT);
            validate_non_negative_index("x_e", "Mx_e", Mx_e);
            context__.validate_dims("data initialization", "x_e", "matrix_d", context__.to_vec(NT,Mx_e));
            x_e = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mx_e);
            vals_r__ = context__.vals_r("x_e");
            pos__ = 0;
            size_t x_e_j_2_max__ = Mx_e;
            size_t x_e_j_1_max__ = NT;
            for (size_t j_2__ = 0; j_2__ < x_e_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_e_j_1_max__; ++j_1__) {
                    x_e(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("y", "NT", NT);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(NT));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(NT);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = NT;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "state_sigma", "int", context__.to_vec());
            state_sigma = int(0);
            vals_i__ = context__.vals_i("state_sigma");
            pos__ = 0;
            state_sigma = vals_i__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "tvtp", "int", context__.to_vec());
            tvtp = int(0);
            vals_i__ = context__.vals_i("tvtp");
            pos__ = 0;
            tvtp = vals_i__[pos__++];
            current_statement_begin__ = 40;
            validate_non_negative_index("order_x_e", "(Mx_e + get_base1(has_intercept, 2, \"has_intercept\", 1))", (Mx_e + get_base1(has_intercept, 2, "has_intercept", 1)));
            context__.validate_dims("data initialization", "order_x_e", "int", context__.to_vec((Mx_e + get_base1(has_intercept, 2, "has_intercept", 1))));
            order_x_e = std::vector<int>((Mx_e + get_base1(has_intercept, 2, "has_intercept", 1)), int(0));
            vals_i__ = context__.vals_i("order_x_e");
            pos__ = 0;
            size_t order_x_e_k_0_max__ = (Mx_e + get_base1(has_intercept, 2, "has_intercept", 1));
            for (size_t k_0__ = 0; k_0__ < order_x_e_k_0_max__; ++k_0__) {
                order_x_e[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("A_prior", "K", K);
            context__.validate_dims("data initialization", "A_prior", "vector_d", context__.to_vec(K));
            A_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("A_prior");
            pos__ = 0;
            size_t A_prior_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < A_prior_j_1_max__; ++j_1__) {
                A_prior(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "A_prior", A_prior, 0);
            current_statement_begin__ = 45;
            validate_non_negative_index("priors", "7", 7);
            validate_non_negative_index("priors", "4", 4);
            context__.validate_dims("data initialization", "priors", "double", context__.to_vec(7,4));
            priors = std::vector<std::vector<double> >(7, std::vector<double>(4, double(0)));
            vals_r__ = context__.vals_r("priors");
            pos__ = 0;
            size_t priors_k_0_max__ = 7;
            size_t priors_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < priors_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < priors_k_0_max__; ++k_0__) {
                    priors[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("id_miss", "(NS * T)", (NS * T));
            context__.validate_dims("data initialization", "id_miss", "double", context__.to_vec((NS * T)));
            id_miss = std::vector<double>((NS * T), double(0));
            vals_r__ = context__.vals_r("id_miss");
            pos__ = 0;
            size_t id_miss_k_0_max__ = (NS * T);
            for (size_t k_0__ = 0; k_0__ < id_miss_k_0_max__; ++k_0__) {
                id_miss[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 54;
            Mz_ = int(0);
            stan::math::fill(Mz_, std::numeric_limits<int>::min());
            stan::math::assign(Mz_,(Mz + sum(stan::model::rvalue(has_intercept, stan::model::cons_list(stan::model::index_min_max(3, 5), stan::model::nil_index_list()), "has_intercept"))));
            current_statement_begin__ = 55;
            Mx_d_ = int(0);
            stan::math::fill(Mx_d_, std::numeric_limits<int>::min());
            stan::math::assign(Mx_d_,(get_base1(has_intercept, 1, "has_intercept", 1) ? (Mx_d + get_base1(has_intercept, 1, "has_intercept", 1)) : (logical_eq(Mx_d, 0) ? 1 : Mx_d ) ));
            current_statement_begin__ = 56;
            Mx_e_ = int(0);
            stan::math::fill(Mx_e_, std::numeric_limits<int>::min());
            stan::math::assign(Mx_e_,(get_base1(has_intercept, 2, "has_intercept", 1) ? (Mx_e + get_base1(has_intercept, 2, "has_intercept", 1)) : (logical_eq(Mx_e, 0) ? 1 : Mx_e ) ));
            current_statement_begin__ = 60;
            validate_non_negative_index("z_", "(NTP * T)", (NTP * T));
            validate_non_negative_index("z_", "Mz_", Mz_);
            z_ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((NTP * T), Mz_);
            stan::math::fill(z_, DUMMY_VAR__);
            stan::math::assign(z_,(sum(stan::model::rvalue(has_intercept, stan::model::cons_list(stan::model::index_min_max(3, 5), stan::model::nil_index_list()), "has_intercept")) ? stan::math::promote_scalar<double>(append_col(rep_vector(1.0, (NS * T)), z)) : stan::math::promote_scalar<double>(z) ));
            current_statement_begin__ = 61;
            validate_non_negative_index("x_d_", "NT", NT);
            validate_non_negative_index("x_d_", "Mx_d_", Mx_d_);
            x_d_ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mx_d_);
            stan::math::fill(x_d_, DUMMY_VAR__);
            stan::math::assign(x_d_,(get_base1(has_intercept, 1, "has_intercept", 1) ? stan::math::promote_scalar<double>(append_col(rep_vector(1.0, NT), x_d)) : stan::math::promote_scalar<double>((logical_eq(Mx_d, 0) ? stan::math::promote_scalar<double>(rep_matrix(0.0, NT, 1)) : stan::math::promote_scalar<double>(x_d) )) ));
            current_statement_begin__ = 62;
            validate_non_negative_index("x_e_", "NT", NT);
            validate_non_negative_index("x_e_", "Mx_e_", Mx_e_);
            x_e_ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(NT, Mx_e_);
            stan::math::fill(x_e_, DUMMY_VAR__);
            stan::math::assign(x_e_,(get_base1(has_intercept, 2, "has_intercept", 1) ? stan::math::promote_scalar<double>(append_col(rep_vector(1.0, NT), x_e)) : stan::math::promote_scalar<double>((logical_eq(Mx_e, 0) ? stan::math::promote_scalar<double>(rep_matrix(0.0, NT, 1)) : stan::math::promote_scalar<double>(x_e) )) ));
            current_statement_begin__ = 65;
            pp1_ = int(0);
            stan::math::fill(pp1_, std::numeric_limits<int>::min());
            stan::math::assign(pp1_,(pp1 + get_base1(has_intercept, 3, "has_intercept", 1)));
            current_statement_begin__ = 66;
            pp2_ = int(0);
            stan::math::fill(pp2_, std::numeric_limits<int>::min());
            stan::math::assign(pp2_,(pp2 + get_base1(has_intercept, 4, "has_intercept", 1)));
            current_statement_begin__ = 67;
            pp3_ = int(0);
            stan::math::fill(pp3_, std::numeric_limits<int>::min());
            stan::math::assign(pp3_,(pp3 + get_base1(has_intercept, 5, "has_intercept", 1)));
            current_statement_begin__ = 68;
            validate_non_negative_index("pp_lambda_", "3", 3);
            validate_non_negative_index("pp_lambda_", "Mz_", Mz_);
            pp_lambda_ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(3, Mz_);
            stan::math::fill(pp_lambda_, DUMMY_VAR__);
            stan::math::assign(pp_lambda_,(sum(stan::model::rvalue(has_intercept, stan::model::cons_list(stan::model::index_min_max(3, 5), stan::model::nil_index_list()), "has_intercept")) ? stan::math::promote_scalar<double>(append_col(to_vector(stan::model::rvalue(has_intercept, stan::model::cons_list(stan::model::index_min_max(3, 5), stan::model::nil_index_list()), "has_intercept")), to_matrix(pp_lambda))) : stan::math::promote_scalar<double>(to_matrix(pp_lambda)) ));
            current_statement_begin__ = 71;
            validate_non_negative_index("pp_gamma_", "pp2_", pp2_);
            pp_gamma_ = Eigen::Matrix<double, Eigen::Dynamic, 1>(pp2_);
            stan::math::fill(pp_gamma_, DUMMY_VAR__);
            stan::math::assign(pp_gamma_,(sum(stan::model::rvalue(has_intercept, stan::model::cons_list(stan::model::index_min_max(3, 5), stan::model::nil_index_list()), "has_intercept")) ? stan::math::promote_scalar<double>(append_row(get_base1(has_intercept, 4, "has_intercept", 1), to_vector(pp_gamma))) : stan::math::promote_scalar<double>(to_vector(pp_gamma)) ));
            current_statement_begin__ = 74;
            Mx_e_un = int(0);
            stan::math::fill(Mx_e_un, std::numeric_limits<int>::min());
            stan::math::assign(Mx_e_un,(Mx_e_ - sum(order_x_e)));
            current_statement_begin__ = 75;
            Mx_e_ord = int(0);
            stan::math::fill(Mx_e_ord, std::numeric_limits<int>::min());
            stan::math::assign(Mx_e_ord,sum(order_x_e));
            current_statement_begin__ = 78;
            K_sigma = int(0);
            stan::math::fill(K_sigma, std::numeric_limits<int>::min());
            stan::math::assign(K_sigma,(state_sigma ? K : 1 ));
            current_statement_begin__ = 81;
            T_ = int(0);
            stan::math::fill(T_, std::numeric_limits<int>::min());
            stan::math::assign(T_,(tvtp ? T : 1 ));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 86;
            validate_non_negative_index("pi1", "K", K);
            validate_non_negative_index("pi1", "NS", NS);
            num_params_r__ += ((K - 1) * NS);
            current_statement_begin__ = 87;
            validate_non_negative_index("A", "K", K);
            validate_non_negative_index("A", "(tvtp ? T : 1 )", (tvtp ? T : 1 ));
            validate_non_negative_index("A", "NTP", NTP);
            validate_non_negative_index("A", "K", K);
            num_params_r__ += ((((K - 1) * (tvtp ? T : 1 )) * NTP) * K);
            current_statement_begin__ = 88;
            validate_non_negative_index("delta", "(tvtp * Mz_)", (tvtp * Mz_));
            num_params_r__ += (1 * (tvtp * Mz_));
            current_statement_begin__ = 89;
            validate_non_negative_index("gamma", "(tvtp * pp2_)", (tvtp * pp2_));
            validate_non_negative_index("gamma", "(K * tvtp)", (K * tvtp));
            num_params_r__ += ((1 * (tvtp * pp2_)) * (K * tvtp));
            current_statement_begin__ = 90;
            validate_non_negative_index("eta", "(tvtp * K)", (tvtp * K));
            validate_non_negative_index("eta", "pp3_", pp3_);
            validate_non_negative_index("eta", "(K - 1)", (K - 1));
            num_params_r__ += (((1 * (tvtp * K)) * pp3_) * (K - 1));
            current_statement_begin__ = 93;
            validate_non_negative_index("alpha", "Mx_d_", Mx_d_);
            num_params_r__ += Mx_d_;
            current_statement_begin__ = 96;
            validate_non_negative_index("beta_un", "K", K);
            validate_non_negative_index("beta_un", "Mx_e_un", Mx_e_un);
            num_params_r__ += (K * Mx_e_un);
            current_statement_begin__ = 97;
            validate_non_negative_index("beta_ord", "K", K);
            validate_non_negative_index("beta_ord", "Mx_e_ord", Mx_e_ord);
            num_params_r__ += (K * Mx_e_ord);
            current_statement_begin__ = 100;
            validate_non_negative_index("sigma", "K_sigma", K_sigma);
            num_params_r__ += (1 * K_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_msm_constant_continuous() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 86;
        if (!(context__.contains_r("pi1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi1");
        pos__ = 0U;
        validate_non_negative_index("pi1", "K", K);
        validate_non_negative_index("pi1", "NS", NS);
        context__.validate_dims("parameter initialization", "pi1", "vector_d", context__.to_vec(NS,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi1(NS, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = NS;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                pi1[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t pi1_i_0_max__ = NS;
        for (size_t i_0__ = 0; i_0__ < pi1_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(pi1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 87;
        if (!(context__.contains_r("A")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A");
        pos__ = 0U;
        validate_non_negative_index("A", "K", K);
        validate_non_negative_index("A", "(tvtp ? T : 1 )", (tvtp ? T : 1 ));
        validate_non_negative_index("A", "NTP", NTP);
        validate_non_negative_index("A", "K", K);
        context__.validate_dims("parameter initialization", "A", "vector_d", context__.to_vec((tvtp ? T : 1 ),NTP,K,K));
        std::vector<std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > > A((tvtp ? T : 1 ), std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > >(NTP, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(K))));
        size_t A_j_1_max__ = K;
        size_t A_k_0_max__ = (tvtp ? T : 1 );
        size_t A_k_1_max__ = NTP;
        size_t A_k_2_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                        A[k_0__][k_1__][k_2__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
        }
        size_t A_i_0_max__ = (tvtp ? T : 1 );
        size_t A_i_1_max__ = NTP;
        size_t A_i_2_max__ = K;
        for (size_t i_0__ = 0; i_0__ < A_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < A_i_1_max__; ++i_1__) {
                for (size_t i_2__ = 0; i_2__ < A_i_2_max__; ++i_2__) {
                    try {
                        writer__.simplex_unconstrain(A[i_0__][i_1__][i_2__]);
                    } catch (const std::exception& e) {
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A: ") + e.what()), current_statement_begin__, prog_reader__());
                    }
                }
            }
        }
        current_statement_begin__ = 88;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "(tvtp * Mz_)", (tvtp * Mz_));
        context__.validate_dims("parameter initialization", "delta", "double", context__.to_vec((tvtp * Mz_)));
        std::vector<double> delta((tvtp * Mz_), double(0));
        size_t delta_k_0_max__ = (tvtp * Mz_);
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            delta[k_0__] = vals_r__[pos__++];
        }
        size_t delta_i_0_max__ = (tvtp * Mz_);
        for (size_t i_0__ = 0; i_0__ < delta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(delta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 89;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "(tvtp * pp2_)", (tvtp * pp2_));
        validate_non_negative_index("gamma", "(K * tvtp)", (K * tvtp));
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec((tvtp * pp2_),(K * tvtp)));
        std::vector<std::vector<double> > gamma((tvtp * pp2_), std::vector<double>((K * tvtp), double(0)));
        size_t gamma_k_0_max__ = (tvtp * pp2_);
        size_t gamma_k_1_max__ = (K * tvtp);
        for (size_t k_1__ = 0; k_1__ < gamma_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
                gamma[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t gamma_i_0_max__ = (tvtp * pp2_);
        size_t gamma_i_1_max__ = (K * tvtp);
        for (size_t i_0__ = 0; i_0__ < gamma_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < gamma_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(gamma[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 90;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "(tvtp * K)", (tvtp * K));
        validate_non_negative_index("eta", "pp3_", pp3_);
        validate_non_negative_index("eta", "(K - 1)", (K - 1));
        context__.validate_dims("parameter initialization", "eta", "double", context__.to_vec((tvtp * K),pp3_,(K - 1)));
        std::vector<std::vector<std::vector<double> > > eta((tvtp * K), std::vector<std::vector<double> >(pp3_, std::vector<double>((K - 1), double(0))));
        size_t eta_k_0_max__ = (tvtp * K);
        size_t eta_k_1_max__ = pp3_;
        size_t eta_k_2_max__ = (K - 1);
        for (size_t k_2__ = 0; k_2__ < eta_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    eta[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                }
            }
        }
        size_t eta_i_0_max__ = (tvtp * K);
        size_t eta_i_1_max__ = pp3_;
        size_t eta_i_2_max__ = (K - 1);
        for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < eta_i_1_max__; ++i_1__) {
                for (size_t i_2__ = 0; i_2__ < eta_i_2_max__; ++i_2__) {
                    try {
                        writer__.scalar_unconstrain(eta[i_0__][i_1__][i_2__]);
                    } catch (const std::exception& e) {
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
                    }
                }
            }
        }
        current_statement_begin__ = 93;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "Mx_d_", Mx_d_);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(Mx_d_));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(Mx_d_);
        size_t alpha_j_1_max__ = Mx_d_;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("beta_un")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_un missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_un");
        pos__ = 0U;
        validate_non_negative_index("beta_un", "K", K);
        validate_non_negative_index("beta_un", "Mx_e_un", Mx_e_un);
        context__.validate_dims("parameter initialization", "beta_un", "vector_d", context__.to_vec(Mx_e_un,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_un(Mx_e_un, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t beta_un_j_1_max__ = K;
        size_t beta_un_k_0_max__ = Mx_e_un;
        for (size_t j_1__ = 0; j_1__ < beta_un_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_un_k_0_max__; ++k_0__) {
                beta_un[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_un_i_0_max__ = Mx_e_un;
        for (size_t i_0__ = 0; i_0__ < beta_un_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(beta_un[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_un: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("beta_ord")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_ord missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_ord");
        pos__ = 0U;
        validate_non_negative_index("beta_ord", "K", K);
        validate_non_negative_index("beta_ord", "Mx_e_ord", Mx_e_ord);
        context__.validate_dims("parameter initialization", "beta_ord", "vector_d", context__.to_vec(Mx_e_ord,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_ord(Mx_e_ord, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t beta_ord_j_1_max__ = K;
        size_t beta_ord_k_0_max__ = Mx_e_ord;
        for (size_t j_1__ = 0; j_1__ < beta_ord_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_ord_k_0_max__; ++k_0__) {
                beta_ord[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_ord_i_0_max__ = Mx_e_ord;
        for (size_t i_0__ = 0; i_0__ < beta_ord_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(beta_ord[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_ord: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K_sigma", K_sigma);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(K_sigma));
        std::vector<double> sigma(K_sigma, double(0));
        size_t sigma_k_0_max__ = K_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = K_sigma;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 86;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pi1;
            size_t pi1_d_0_max__ = NS;
            pi1.reserve(pi1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pi1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pi1.push_back(in__.simplex_constrain(K, lp__));
                else
                    pi1.push_back(in__.simplex_constrain(K));
            }
            current_statement_begin__ = 87;
            std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > > A;
            size_t A_d_0_max__ = (tvtp ? T : 1 );
            size_t A_d_1_max__ = NTP;
            size_t A_d_2_max__ = K;
            A.resize(A_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < A_d_0_max__; ++d_0__) {
                A[d_0__].resize(A_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < A_d_1_max__; ++d_1__) {
                    A[d_0__][d_1__].reserve(A_d_2_max__);
                    for (size_t d_2__ = 0; d_2__ < A_d_2_max__; ++d_2__) {
                        if (jacobian__)
                            A[d_0__][d_1__].push_back(in__.simplex_constrain(K, lp__));
                        else
                            A[d_0__][d_1__].push_back(in__.simplex_constrain(K));
                    }
                }
            }
            current_statement_begin__ = 88;
            std::vector<local_scalar_t__> delta;
            size_t delta_d_0_max__ = (tvtp * Mz_);
            delta.reserve(delta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta.push_back(in__.scalar_constrain(lp__));
                else
                    delta.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 89;
            std::vector<std::vector<local_scalar_t__> > gamma;
            size_t gamma_d_0_max__ = (tvtp * pp2_);
            size_t gamma_d_1_max__ = (K * tvtp);
            gamma.resize(gamma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
                gamma[d_0__].reserve(gamma_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < gamma_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        gamma[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        gamma[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 90;
            std::vector<std::vector<std::vector<local_scalar_t__> > > eta;
            size_t eta_d_0_max__ = (tvtp * K);
            size_t eta_d_1_max__ = pp3_;
            size_t eta_d_2_max__ = (K - 1);
            eta.resize(eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
                eta[d_0__].resize(eta_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < eta_d_1_max__; ++d_1__) {
                    eta[d_0__][d_1__].reserve(eta_d_2_max__);
                    for (size_t d_2__ = 0; d_2__ < eta_d_2_max__; ++d_2__) {
                        if (jacobian__)
                            eta[d_0__][d_1__].push_back(in__.scalar_constrain(lp__));
                        else
                            eta[d_0__][d_1__].push_back(in__.scalar_constrain());
                    }
                }
            }
            current_statement_begin__ = 93;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain(Mx_d_, lp__);
            else
                alpha = in__.vector_constrain(Mx_d_);
            current_statement_begin__ = 96;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta_un;
            size_t beta_un_d_0_max__ = Mx_e_un;
            beta_un.reserve(beta_un_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_un_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_un.push_back(in__.vector_constrain(K, lp__));
                else
                    beta_un.push_back(in__.vector_constrain(K));
            }
            current_statement_begin__ = 97;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta_ord;
            size_t beta_ord_d_0_max__ = Mx_e_ord;
            beta_ord.reserve(beta_ord_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_ord_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_ord.push_back(in__.ordered_constrain(K, lp__));
                else
                    beta_ord.push_back(in__.ordered_constrain(K));
            }
            current_statement_begin__ = 100;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = K_sigma;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 104;
            validate_non_negative_index("logA", "K", K);
            validate_non_negative_index("logA", "K", K);
            validate_non_negative_index("logA", "T_", T_);
            validate_non_negative_index("logA", "NTP", NTP);
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > > logA(T_, std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> >(NTP, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(K, K)));
            stan::math::initialize(logA, DUMMY_VAR__);
            stan::math::fill(logA, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("beta", "Mx_e_", Mx_e_);
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta(Mx_e_, K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("logalpha", "K", K);
            validate_non_negative_index("logalpha", "(NS * T)", (NS * T));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > logalpha((NS * T), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(logalpha, DUMMY_VAR__);
            stan::math::fill(logalpha, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("llh_tmp", "K", K);
            validate_non_negative_index("llh_tmp", "(NS * T)", (NS * T));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > llh_tmp((NS * T), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(llh_tmp, DUMMY_VAR__);
            stan::math::fill(llh_tmp, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("lambda_prime", "Mz_", Mz_);
            validate_non_negative_index("lambda_prime", "K", K);
            validate_non_negative_index("lambda_prime", "K", K);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > lambda_prime(K, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(Mz_, K));
            stan::math::initialize(lambda_prime, DUMMY_VAR__);
            stan::math::fill(lambda_prime, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 111;
            for (int i = 1; i <= K; ++i) {
                {
                current_statement_begin__ = 112;
                int count3(0);
                (void) count3;  // dummy to suppress unused var warning
                stan::math::fill(count3, std::numeric_limits<int>::min());
                stan::math::assign(count3,1);
                current_statement_begin__ = 113;
                for (int j = 1; j <= K; ++j) {
                    {
                    current_statement_begin__ = 114;
                    int count2(0);
                    (void) count2;  // dummy to suppress unused var warning
                    stan::math::fill(count2, std::numeric_limits<int>::min());
                    stan::math::assign(count2,1);
                    current_statement_begin__ = 115;
                    int count1(0);
                    (void) count1;  // dummy to suppress unused var warning
                    stan::math::fill(count1, std::numeric_limits<int>::min());
                    stan::math::assign(count1,1);
                    current_statement_begin__ = 116;
                    for (int q = 1; q <= Mz_; ++q) {
                        current_statement_begin__ = 117;
                        if (as_bool(logical_eq(i, j))) {
                            current_statement_begin__ = 118;
                            stan::model::assign(lambda_prime, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                        0.0, 
                                        "assigning variable lambda_prime");
                        } else {
                            current_statement_begin__ = 120;
                            if (as_bool(get_base1(pp_lambda_, 1, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 121;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(delta, q, "delta", 1), 
                                            "assigning variable lambda_prime");
                            } else if (as_bool(get_base1(pp_lambda_, 2, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 123;
                                while (as_bool(logical_neq(get_base1(pp_gamma_, count2, "pp_gamma_", 1), 1))) {
                                    current_statement_begin__ = 124;
                                    stan::math::assign(count2, (count2 + 1));
                                }
                                current_statement_begin__ = 126;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(get_base1(gamma, count2, "gamma", 1), i, "gamma", 2), 
                                            "assigning variable lambda_prime");
                                current_statement_begin__ = 127;
                                stan::math::assign(count2, (count2 + 1));
                            } else if (as_bool(get_base1(pp_lambda_, 3, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 129;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(get_base1(get_base1(eta, i, "eta", 1), count1, "eta", 2), count3, "eta", 3), 
                                            "assigning variable lambda_prime");
                                current_statement_begin__ = 130;
                                stan::math::assign(count1, (count1 + 1));
                            }
                            current_statement_begin__ = 132;
                            if (as_bool(logical_eq(q, Mz_))) {
                                current_statement_begin__ = 133;
                                stan::math::assign(count3, (count3 + 1));
                            }
                        }
                    }
                    }
                }
                }
            }
            current_statement_begin__ = 142;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 143;
                stan::model::assign(logalpha, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            rep_array(0.0, (NS * T)), 
                            "assigning variable logalpha");
                current_statement_begin__ = 144;
                stan::model::assign(llh_tmp, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            rep_array(0.0, (NS * T)), 
                            "assigning variable llh_tmp");
                current_statement_begin__ = 145;
                if (as_bool(logical_eq(tvtp, 0))) {
                    current_statement_begin__ = 146;
                    for (int i = 1; i <= K; ++i) {
                        current_statement_begin__ = 146;
                        for (int n = 1; n <= NTP; ++n) {
                            current_statement_begin__ = 146;
                            stan::model::assign(logA, 
                                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())))), 
                                        stan::math::log(get_base1(get_base1(get_base1(get_base1(A, 1, "A", 1), n, "A", 2), i, "A", 3), j, "A", 4)), 
                                        "assigning variable logA");
                        }
                    }
                } else {
                    current_statement_begin__ = 148;
                    for (int n = 1; n <= NTP; ++n) {
                        current_statement_begin__ = 148;
                        for (int t = 1; t <= T; ++t) {
                            current_statement_begin__ = 148;
                            stan::model::assign(logA, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                        stan::math::log(transpose(softmax(to_vector(multiply(get_base1(z_, (t + (T * (n - 1))), "z_", 1), get_base1(lambda_prime, j, "lambda_prime", 1)))))), 
                                        "assigning variable logA");
                        }
                    }
                }
            }
            {
            current_statement_begin__ = 154;
            int count_ordered(0);
            (void) count_ordered;  // dummy to suppress unused var warning
            stan::math::fill(count_ordered, std::numeric_limits<int>::min());
            stan::math::assign(count_ordered,1);
            current_statement_begin__ = 155;
            int count_unordered(0);
            (void) count_unordered;  // dummy to suppress unused var warning
            stan::math::fill(count_unordered, std::numeric_limits<int>::min());
            stan::math::assign(count_unordered,1);
            current_statement_begin__ = 156;
            for (int m = 1; m <= Mx_e_; ++m) {
                current_statement_begin__ = 157;
                if (as_bool(get_base1(order_x_e, m, "order_x_e", 1))) {
                    current_statement_begin__ = 158;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                transpose(get_base1(beta_ord, count_ordered, "beta_ord", 1)), 
                                "assigning variable beta");
                    current_statement_begin__ = 158;
                    stan::math::assign(count_ordered, (count_ordered + 1));
                } else {
                    current_statement_begin__ = 160;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                transpose(get_base1(beta_un, count_unordered, "beta_un", 1)), 
                                "assigning variable beta");
                    current_statement_begin__ = 160;
                    stan::math::assign(count_unordered, (count_unordered + 1));
                }
            }
            }
            current_statement_begin__ = 166;
            for (int ns = 1; ns <= NS; ++ns) {
                {
                current_statement_begin__ = 168;
                int n_tp(0);
                (void) n_tp;  // dummy to suppress unused var warning
                stan::math::fill(n_tp, std::numeric_limits<int>::min());
                stan::math::assign(n_tp,get_base1(id_tp, ns, "id_tp", 1));
                current_statement_begin__ = 169;
                int t_ns0(0);
                (void) t_ns0;  // dummy to suppress unused var warning
                stan::math::fill(t_ns0, std::numeric_limits<int>::min());
                stan::math::assign(t_ns0,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 1, "slicer_T", 2));
                current_statement_begin__ = 169;
                int t_ns1(0);
                (void) t_ns1;  // dummy to suppress unused var warning
                stan::math::fill(t_ns1, std::numeric_limits<int>::min());
                stan::math::assign(t_ns1,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 2, "slicer_T", 2));
                current_statement_begin__ = 170;
                for (int t = t_ns0; t <= t_ns1; ++t) {
                    current_statement_begin__ = 171;
                    if (as_bool(get_base1(id_miss, (t + ((ns - 1) * T)), "id_miss", 1))) {
                        current_statement_begin__ = 172;
                        stan::model::assign(llh_tmp, 
                                    stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::nil_index_list()), 
                                    rep_vector(0.0, K), 
                                    "assigning variable llh_tmp");
                    } else {
                        {
                        current_statement_begin__ = 175;
                        int t0(0);
                        (void) t0;  // dummy to suppress unused var warning
                        stan::math::fill(t0, std::numeric_limits<int>::min());
                        stan::math::assign(t0,get_base1(get_base1(startstop, t, "startstop", 1), ((ns * 2) - 1), "startstop", 2));
                        current_statement_begin__ = 175;
                        int t1(0);
                        (void) t1;  // dummy to suppress unused var warning
                        stan::math::fill(t1, std::numeric_limits<int>::min());
                        stan::math::assign(t1,get_base1(get_base1(startstop, t, "startstop", 1), (ns * 2), "startstop", 2));
                        current_statement_begin__ = 176;
                        for (int j = 1; j <= K; ++j) {
                            {
                            current_statement_begin__ = 178;
                            int j_(0);
                            (void) j_;  // dummy to suppress unused var warning
                            stan::math::fill(j_, std::numeric_limits<int>::min());
                            stan::math::assign(j_,(state_sigma ? j : 1 ));
                            current_statement_begin__ = 179;
                            stan::model::assign(llh_tmp, 
                                        stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                        normal_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "y"), add(multiply(stan::model::rvalue(x_d_, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "x_d_"), alpha), multiply(stan::model::rvalue(x_e_, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "x_e_"), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "beta"))), get_base1(sigma, j_, "sigma", 1)), 
                                        "assigning variable llh_tmp");
                            }
                        }
                        }
                    }
                }
                current_statement_begin__ = 186;
                stan::model::assign(logalpha, 
                            stan::model::cons_list(stan::model::index_uni((t_ns0 + ((ns - 1) * T))), stan::model::nil_index_list()), 
                            add(stan::math::log(get_base1(pi1, ns, "pi1", 1)), get_base1(get_base1(llh_tmp, ns, "llh_tmp", 1), t_ns0, "llh_tmp", 2)), 
                            "assigning variable logalpha");
                current_statement_begin__ = 187;
                for (int t = (t_ns0 + 1); t <= t_ns1; ++t) {
                    current_statement_begin__ = 188;
                    for (int j = 1; j <= K; ++j) {
                        current_statement_begin__ = 189;
                        stan::model::assign(logalpha, 
                                    stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    log_sum_exp(add(add(get_base1(logalpha, ((t + ((ns - 1) * T)) - 1), "logalpha", 1), stan::model::rvalue(logA, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(n_tp), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())))), "logA")), rep_vector(get_base1(get_base1(llh_tmp, (t + ((ns - 1) * T)), "llh_tmp", 1), j, "llh_tmp", 2), K))), 
                                    "assigning variable logalpha");
                    }
                }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 104;
            size_t logA_k_0_max__ = T_;
            size_t logA_k_1_max__ = NTP;
            size_t logA_j_1_max__ = K;
            size_t logA_j_2_max__ = K;
            for (size_t k_0__ = 0; k_0__ < logA_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < logA_k_1_max__; ++k_1__) {
                    for (size_t j_1__ = 0; j_1__ < logA_j_1_max__; ++j_1__) {
                        for (size_t j_2__ = 0; j_2__ < logA_j_2_max__; ++j_2__) {
                            if (stan::math::is_uninitialized(logA[k_0__][k_1__](j_1__, j_2__))) {
                                std::stringstream msg__;
                                msg__ << "Undefined transformed parameter: logA" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logA: ") + msg__.str()), current_statement_begin__, prog_reader__());
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 105;
            size_t beta_j_1_max__ = Mx_e_;
            size_t beta_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 106;
            size_t logalpha_k_0_max__ = (NS * T);
            size_t logalpha_j_1_max__ = K;
            for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(logalpha[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: logalpha" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logalpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 107;
            size_t llh_tmp_k_0_max__ = (NS * T);
            size_t llh_tmp_j_1_max__ = K;
            for (size_t k_0__ = 0; k_0__ < llh_tmp_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < llh_tmp_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(llh_tmp[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: llh_tmp" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable llh_tmp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 108;
            size_t lambda_prime_k_0_max__ = K;
            size_t lambda_prime_j_1_max__ = Mz_;
            size_t lambda_prime_j_2_max__ = K;
            for (size_t k_0__ = 0; k_0__ < lambda_prime_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < lambda_prime_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < lambda_prime_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(lambda_prime[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: lambda_prime" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_prime: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 198;
            if (as_bool(logical_eq(tvtp, 0))) {
                current_statement_begin__ = 199;
                for (int n = 1; n <= NTP; ++n) {
                    current_statement_begin__ = 200;
                    for (int k = 1; k <= K; ++k) {
                        current_statement_begin__ = 201;
                        lp_accum__.add(dirichlet_log(get_base1(get_base1(get_base1(A, 1, "A", 1), n, "A", 2), k, "A", 3), A_prior));
                    }
                }
            } else {
                current_statement_begin__ = 206;
                if (as_bool(logical_eq(get_base1(get_base1(priors, 1, "priors", 1), 1, "priors", 2), 1))) {
                    current_statement_begin__ = 207;
                    lp_accum__.add(normal_log(delta, get_base1(get_base1(priors, 1, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 1, "priors", 1), 3, "priors", 2)));
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 1, "priors", 1), 1, "priors", 2), 2))) {
                    current_statement_begin__ = 209;
                    lp_accum__.add(cauchy_log(delta, get_base1(get_base1(priors, 1, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 1, "priors", 1), 3, "priors", 2)));
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 1, "priors", 1), 1, "priors", 2), 3))) {
                    current_statement_begin__ = 211;
                    lp_accum__.add(student_t_log(delta, get_base1(get_base1(priors, 1, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 1, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 1, "priors", 1), 3, "priors", 2)));
                }
                current_statement_begin__ = 214;
                if (as_bool(logical_eq(get_base1(get_base1(priors, 2, "priors", 1), 1, "priors", 2), 1))) {
                    current_statement_begin__ = 215;
                    for (int i = 1; i <= pp2_; ++i) {
                        current_statement_begin__ = 215;
                        lp_accum__.add(normal_log(get_base1(gamma, i, "gamma", 1), get_base1(get_base1(priors, 2, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 2, "priors", 1), 3, "priors", 2)));
                    }
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 2, "priors", 1), 1, "priors", 2), 2))) {
                    current_statement_begin__ = 217;
                    for (int i = 1; i <= pp2_; ++i) {
                        current_statement_begin__ = 217;
                        lp_accum__.add(cauchy_log(get_base1(gamma, i, "gamma", 1), get_base1(get_base1(priors, 2, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 2, "priors", 1), 3, "priors", 2)));
                    }
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 2, "priors", 1), 1, "priors", 2), 3))) {
                    current_statement_begin__ = 219;
                    for (int i = 1; i <= pp2_; ++i) {
                        current_statement_begin__ = 219;
                        lp_accum__.add(student_t_log(get_base1(gamma, i, "gamma", 1), get_base1(get_base1(priors, 2, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 2, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 2, "priors", 1), 3, "priors", 2)));
                    }
                }
                current_statement_begin__ = 222;
                if (as_bool(logical_eq(get_base1(get_base1(priors, 3, "priors", 1), 1, "priors", 2), 1))) {
                    current_statement_begin__ = 223;
                    for (int i = 1; i <= pp3_; ++i) {
                        current_statement_begin__ = 223;
                        for (int j = 1; j <= K; ++j) {
                            current_statement_begin__ = 223;
                            lp_accum__.add(normal_log(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "eta"), get_base1(get_base1(priors, 3, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 3, "priors", 1), 3, "priors", 2)));
                        }
                    }
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 3, "priors", 1), 1, "priors", 2), 2))) {
                    current_statement_begin__ = 225;
                    for (int i = 1; i <= pp3_; ++i) {
                        current_statement_begin__ = 225;
                        for (int j = 1; j <= K; ++j) {
                            current_statement_begin__ = 225;
                            lp_accum__.add(cauchy_log(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "eta"), get_base1(get_base1(priors, 3, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 3, "priors", 1), 3, "priors", 2)));
                        }
                    }
                } else if (as_bool(logical_eq(get_base1(get_base1(priors, 3, "priors", 1), 1, "priors", 2), 3))) {
                    current_statement_begin__ = 227;
                    for (int i = 1; i <= pp3_; ++i) {
                        current_statement_begin__ = 227;
                        for (int j = 1; j <= K; ++j) {
                            current_statement_begin__ = 227;
                            lp_accum__.add(student_t_log(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "eta"), get_base1(get_base1(priors, 3, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 3, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 3, "priors", 1), 3, "priors", 2)));
                        }
                    }
                }
            }
            current_statement_begin__ = 233;
            if (as_bool(logical_eq(get_base1(get_base1(priors, 4, "priors", 1), 1, "priors", 2), 1))) {
                current_statement_begin__ = 234;
                lp_accum__.add(normal_log(alpha, get_base1(get_base1(priors, 4, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 4, "priors", 1), 3, "priors", 2)));
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 4, "priors", 1), 1, "priors", 2), 2))) {
                current_statement_begin__ = 236;
                lp_accum__.add(cauchy_log(alpha, get_base1(get_base1(priors, 4, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 4, "priors", 1), 3, "priors", 2)));
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 4, "priors", 1), 1, "priors", 2), 3))) {
                current_statement_begin__ = 238;
                lp_accum__.add(student_t_log(alpha, get_base1(get_base1(priors, 4, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 4, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 4, "priors", 1), 3, "priors", 2)));
            }
            current_statement_begin__ = 242;
            if (as_bool(logical_eq(get_base1(get_base1(priors, 5, "priors", 1), 1, "priors", 2), 1))) {
                current_statement_begin__ = 243;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 243;
                    lp_accum__.add(normal_log(stan::model::rvalue(beta_un, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_un"), get_base1(get_base1(priors, 5, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 5, "priors", 1), 3, "priors", 2)));
                }
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 5, "priors", 1), 1, "priors", 2), 2))) {
                current_statement_begin__ = 245;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 245;
                    lp_accum__.add(cauchy_log(stan::model::rvalue(beta_un, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_un"), get_base1(get_base1(priors, 5, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 5, "priors", 1), 3, "priors", 2)));
                }
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 5, "priors", 1), 1, "priors", 2), 3))) {
                current_statement_begin__ = 247;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 247;
                    lp_accum__.add(student_t_log(stan::model::rvalue(beta_un, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_un"), get_base1(get_base1(priors, 5, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 5, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 5, "priors", 1), 3, "priors", 2)));
                }
            }
            current_statement_begin__ = 251;
            if (as_bool(logical_eq(get_base1(get_base1(priors, 6, "priors", 1), 1, "priors", 2), 1))) {
                current_statement_begin__ = 252;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 252;
                    lp_accum__.add(normal_log(stan::model::rvalue(beta_ord, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_ord"), get_base1(get_base1(priors, 6, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 6, "priors", 1), 3, "priors", 2)));
                }
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 6, "priors", 1), 1, "priors", 2), 2))) {
                current_statement_begin__ = 254;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 254;
                    lp_accum__.add(cauchy_log(stan::model::rvalue(beta_ord, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_ord"), get_base1(get_base1(priors, 6, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 6, "priors", 1), 3, "priors", 2)));
                }
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 6, "priors", 1), 1, "priors", 2), 3))) {
                current_statement_begin__ = 256;
                for (int i = 1; i <= K; ++i) {
                    current_statement_begin__ = 256;
                    lp_accum__.add(student_t_log(stan::model::rvalue(beta_ord, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "beta_ord"), get_base1(get_base1(priors, 6, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 6, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 6, "priors", 1), 3, "priors", 2)));
                }
            }
            current_statement_begin__ = 260;
            if (as_bool(logical_eq(get_base1(get_base1(priors, 7, "priors", 1), 1, "priors", 2), 1))) {
                current_statement_begin__ = 261;
                lp_accum__.add(normal_log(sigma, get_base1(get_base1(priors, 7, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 7, "priors", 1), 3, "priors", 2)));
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 7, "priors", 1), 1, "priors", 2), 2))) {
                current_statement_begin__ = 263;
                lp_accum__.add(cauchy_log(sigma, get_base1(get_base1(priors, 7, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 7, "priors", 1), 3, "priors", 2)));
            } else if (as_bool(logical_eq(get_base1(get_base1(priors, 7, "priors", 1), 1, "priors", 2), 3))) {
                current_statement_begin__ = 265;
                lp_accum__.add(student_t_log(sigma, get_base1(get_base1(priors, 7, "priors", 1), 4, "priors", 2), get_base1(get_base1(priors, 7, "priors", 1), 2, "priors", 2), get_base1(get_base1(priors, 7, "priors", 1), 3, "priors", 2)));
            }
            current_statement_begin__ = 270;
            for (int ns = 1; ns <= NS; ++ns) {
                {
                current_statement_begin__ = 272;
                int t_ns1(0);
                (void) t_ns1;  // dummy to suppress unused var warning
                stan::math::fill(t_ns1, std::numeric_limits<int>::min());
                stan::math::assign(t_ns1,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 2, "slicer_T", 2));
                current_statement_begin__ = 273;
                lp_accum__.add(log_sum_exp(get_base1(logalpha, (t_ns1 + ((ns - 1) * T)), "logalpha", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi1");
        names__.push_back("A");
        names__.push_back("delta");
        names__.push_back("gamma");
        names__.push_back("eta");
        names__.push_back("alpha");
        names__.push_back("beta_un");
        names__.push_back("beta_ord");
        names__.push_back("sigma");
        names__.push_back("logA");
        names__.push_back("beta");
        names__.push_back("logalpha");
        names__.push_back("llh_tmp");
        names__.push_back("lambda_prime");
        names__.push_back("prS");
        names__.push_back("y_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(NS);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((tvtp ? T : 1 ));
        dims__.push_back(NTP);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((tvtp * Mz_));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((tvtp * pp2_));
        dims__.push_back((K * tvtp));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((tvtp * K));
        dims__.push_back(pp3_);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mx_d_);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mx_e_un);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mx_e_ord);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T_);
        dims__.push_back(NTP);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mx_e_);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((NS * T));
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((NS * T));
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(Mz_);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((NS * T));
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NT);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_msm_constant_continuous_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi1;
        size_t pi1_d_0_max__ = NS;
        pi1.reserve(pi1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pi1_d_0_max__; ++d_0__) {
            pi1.push_back(in__.simplex_constrain(K));
        }
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = NS;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                vars__.push_back(pi1[k_0__](j_1__));
            }
        }
        std::vector<std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > > A;
        size_t A_d_0_max__ = (tvtp ? T : 1 );
        size_t A_d_1_max__ = NTP;
        size_t A_d_2_max__ = K;
        A.resize(A_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < A_d_0_max__; ++d_0__) {
            A[d_0__].resize(A_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < A_d_1_max__; ++d_1__) {
                A[d_0__][d_1__].reserve(A_d_2_max__);
                for (size_t d_2__ = 0; d_2__ < A_d_2_max__; ++d_2__) {
                    A[d_0__][d_1__].push_back(in__.simplex_constrain(K));
                }
            }
        }
        size_t A_j_1_max__ = K;
        size_t A_k_0_max__ = (tvtp ? T : 1 );
        size_t A_k_1_max__ = NTP;
        size_t A_k_2_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                        vars__.push_back(A[k_0__][k_1__][k_2__](j_1__));
                    }
                }
            }
        }
        std::vector<double> delta;
        size_t delta_d_0_max__ = (tvtp * Mz_);
        delta.reserve(delta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
            delta.push_back(in__.scalar_constrain());
        }
        size_t delta_k_0_max__ = (tvtp * Mz_);
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            vars__.push_back(delta[k_0__]);
        }
        std::vector<std::vector<double> > gamma;
        size_t gamma_d_0_max__ = (tvtp * pp2_);
        size_t gamma_d_1_max__ = (K * tvtp);
        gamma.resize(gamma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_d_0_max__; ++d_0__) {
            gamma[d_0__].reserve(gamma_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < gamma_d_1_max__; ++d_1__) {
                gamma[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t gamma_k_0_max__ = (tvtp * pp2_);
        size_t gamma_k_1_max__ = (K * tvtp);
        for (size_t k_1__ = 0; k_1__ < gamma_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<std::vector<double> > > eta;
        size_t eta_d_0_max__ = (tvtp * K);
        size_t eta_d_1_max__ = pp3_;
        size_t eta_d_2_max__ = (K - 1);
        eta.resize(eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
            eta[d_0__].resize(eta_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < eta_d_1_max__; ++d_1__) {
                eta[d_0__][d_1__].reserve(eta_d_2_max__);
                for (size_t d_2__ = 0; d_2__ < eta_d_2_max__; ++d_2__) {
                    eta[d_0__][d_1__].push_back(in__.scalar_constrain());
                }
            }
        }
        size_t eta_k_0_max__ = (tvtp * K);
        size_t eta_k_1_max__ = pp3_;
        size_t eta_k_2_max__ = (K - 1);
        for (size_t k_2__ = 0; k_2__ < eta_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    vars__.push_back(eta[k_0__][k_1__][k_2__]);
                }
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain(Mx_d_);
        size_t alpha_j_1_max__ = Mx_d_;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_un;
        size_t beta_un_d_0_max__ = Mx_e_un;
        beta_un.reserve(beta_un_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_un_d_0_max__; ++d_0__) {
            beta_un.push_back(in__.vector_constrain(K));
        }
        size_t beta_un_j_1_max__ = K;
        size_t beta_un_k_0_max__ = Mx_e_un;
        for (size_t j_1__ = 0; j_1__ < beta_un_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_un_k_0_max__; ++k_0__) {
                vars__.push_back(beta_un[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_ord;
        size_t beta_ord_d_0_max__ = Mx_e_ord;
        beta_ord.reserve(beta_ord_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_ord_d_0_max__; ++d_0__) {
            beta_ord.push_back(in__.ordered_constrain(K));
        }
        size_t beta_ord_j_1_max__ = K;
        size_t beta_ord_k_0_max__ = Mx_e_ord;
        for (size_t j_1__ = 0; j_1__ < beta_ord_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_ord_k_0_max__; ++k_0__) {
                vars__.push_back(beta_ord[k_0__](j_1__));
            }
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = K_sigma;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = K_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 104;
            validate_non_negative_index("logA", "K", K);
            validate_non_negative_index("logA", "K", K);
            validate_non_negative_index("logA", "T_", T_);
            validate_non_negative_index("logA", "NTP", NTP);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > > logA(T_, std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(NTP, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K)));
            stan::math::initialize(logA, DUMMY_VAR__);
            stan::math::fill(logA, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("beta", "Mx_e_", Mx_e_);
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(Mx_e_, K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("logalpha", "K", K);
            validate_non_negative_index("logalpha", "(NS * T)", (NS * T));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > logalpha((NS * T), Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(logalpha, DUMMY_VAR__);
            stan::math::fill(logalpha, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("llh_tmp", "K", K);
            validate_non_negative_index("llh_tmp", "(NS * T)", (NS * T));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > llh_tmp((NS * T), Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(llh_tmp, DUMMY_VAR__);
            stan::math::fill(llh_tmp, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("lambda_prime", "Mz_", Mz_);
            validate_non_negative_index("lambda_prime", "K", K);
            validate_non_negative_index("lambda_prime", "K", K);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > lambda_prime(K, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Mz_, K));
            stan::math::initialize(lambda_prime, DUMMY_VAR__);
            stan::math::fill(lambda_prime, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 111;
            for (int i = 1; i <= K; ++i) {
                {
                current_statement_begin__ = 112;
                int count3(0);
                (void) count3;  // dummy to suppress unused var warning
                stan::math::fill(count3, std::numeric_limits<int>::min());
                stan::math::assign(count3,1);
                current_statement_begin__ = 113;
                for (int j = 1; j <= K; ++j) {
                    {
                    current_statement_begin__ = 114;
                    int count2(0);
                    (void) count2;  // dummy to suppress unused var warning
                    stan::math::fill(count2, std::numeric_limits<int>::min());
                    stan::math::assign(count2,1);
                    current_statement_begin__ = 115;
                    int count1(0);
                    (void) count1;  // dummy to suppress unused var warning
                    stan::math::fill(count1, std::numeric_limits<int>::min());
                    stan::math::assign(count1,1);
                    current_statement_begin__ = 116;
                    for (int q = 1; q <= Mz_; ++q) {
                        current_statement_begin__ = 117;
                        if (as_bool(logical_eq(i, j))) {
                            current_statement_begin__ = 118;
                            stan::model::assign(lambda_prime, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                        0.0, 
                                        "assigning variable lambda_prime");
                        } else {
                            current_statement_begin__ = 120;
                            if (as_bool(get_base1(pp_lambda_, 1, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 121;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(delta, q, "delta", 1), 
                                            "assigning variable lambda_prime");
                            } else if (as_bool(get_base1(pp_lambda_, 2, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 123;
                                while (as_bool(logical_neq(get_base1(pp_gamma_, count2, "pp_gamma_", 1), 1))) {
                                    current_statement_begin__ = 124;
                                    stan::math::assign(count2, (count2 + 1));
                                }
                                current_statement_begin__ = 126;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(get_base1(gamma, count2, "gamma", 1), i, "gamma", 2), 
                                            "assigning variable lambda_prime");
                                current_statement_begin__ = 127;
                                stan::math::assign(count2, (count2 + 1));
                            } else if (as_bool(get_base1(pp_lambda_, 3, q, "pp_lambda_", 1))) {
                                current_statement_begin__ = 129;
                                stan::model::assign(lambda_prime, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(q), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                            get_base1(get_base1(get_base1(eta, i, "eta", 1), count1, "eta", 2), count3, "eta", 3), 
                                            "assigning variable lambda_prime");
                                current_statement_begin__ = 130;
                                stan::math::assign(count1, (count1 + 1));
                            }
                            current_statement_begin__ = 132;
                            if (as_bool(logical_eq(q, Mz_))) {
                                current_statement_begin__ = 133;
                                stan::math::assign(count3, (count3 + 1));
                            }
                        }
                    }
                    }
                }
                }
            }
            current_statement_begin__ = 142;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 143;
                stan::model::assign(logalpha, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            rep_array(0.0, (NS * T)), 
                            "assigning variable logalpha");
                current_statement_begin__ = 144;
                stan::model::assign(llh_tmp, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            rep_array(0.0, (NS * T)), 
                            "assigning variable llh_tmp");
                current_statement_begin__ = 145;
                if (as_bool(logical_eq(tvtp, 0))) {
                    current_statement_begin__ = 146;
                    for (int i = 1; i <= K; ++i) {
                        current_statement_begin__ = 146;
                        for (int n = 1; n <= NTP; ++n) {
                            current_statement_begin__ = 146;
                            stan::model::assign(logA, 
                                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())))), 
                                        stan::math::log(get_base1(get_base1(get_base1(get_base1(A, 1, "A", 1), n, "A", 2), i, "A", 3), j, "A", 4)), 
                                        "assigning variable logA");
                        }
                    }
                } else {
                    current_statement_begin__ = 148;
                    for (int n = 1; n <= NTP; ++n) {
                        current_statement_begin__ = 148;
                        for (int t = 1; t <= T; ++t) {
                            current_statement_begin__ = 148;
                            stan::model::assign(logA, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                        stan::math::log(transpose(softmax(to_vector(multiply(get_base1(z_, (t + (T * (n - 1))), "z_", 1), get_base1(lambda_prime, j, "lambda_prime", 1)))))), 
                                        "assigning variable logA");
                        }
                    }
                }
            }
            {
            current_statement_begin__ = 154;
            int count_ordered(0);
            (void) count_ordered;  // dummy to suppress unused var warning
            stan::math::fill(count_ordered, std::numeric_limits<int>::min());
            stan::math::assign(count_ordered,1);
            current_statement_begin__ = 155;
            int count_unordered(0);
            (void) count_unordered;  // dummy to suppress unused var warning
            stan::math::fill(count_unordered, std::numeric_limits<int>::min());
            stan::math::assign(count_unordered,1);
            current_statement_begin__ = 156;
            for (int m = 1; m <= Mx_e_; ++m) {
                current_statement_begin__ = 157;
                if (as_bool(get_base1(order_x_e, m, "order_x_e", 1))) {
                    current_statement_begin__ = 158;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                transpose(get_base1(beta_ord, count_ordered, "beta_ord", 1)), 
                                "assigning variable beta");
                    current_statement_begin__ = 158;
                    stan::math::assign(count_ordered, (count_ordered + 1));
                } else {
                    current_statement_begin__ = 160;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                transpose(get_base1(beta_un, count_unordered, "beta_un", 1)), 
                                "assigning variable beta");
                    current_statement_begin__ = 160;
                    stan::math::assign(count_unordered, (count_unordered + 1));
                }
            }
            }
            current_statement_begin__ = 166;
            for (int ns = 1; ns <= NS; ++ns) {
                {
                current_statement_begin__ = 168;
                int n_tp(0);
                (void) n_tp;  // dummy to suppress unused var warning
                stan::math::fill(n_tp, std::numeric_limits<int>::min());
                stan::math::assign(n_tp,get_base1(id_tp, ns, "id_tp", 1));
                current_statement_begin__ = 169;
                int t_ns0(0);
                (void) t_ns0;  // dummy to suppress unused var warning
                stan::math::fill(t_ns0, std::numeric_limits<int>::min());
                stan::math::assign(t_ns0,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 1, "slicer_T", 2));
                current_statement_begin__ = 169;
                int t_ns1(0);
                (void) t_ns1;  // dummy to suppress unused var warning
                stan::math::fill(t_ns1, std::numeric_limits<int>::min());
                stan::math::assign(t_ns1,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 2, "slicer_T", 2));
                current_statement_begin__ = 170;
                for (int t = t_ns0; t <= t_ns1; ++t) {
                    current_statement_begin__ = 171;
                    if (as_bool(get_base1(id_miss, (t + ((ns - 1) * T)), "id_miss", 1))) {
                        current_statement_begin__ = 172;
                        stan::model::assign(llh_tmp, 
                                    stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::nil_index_list()), 
                                    rep_vector(0.0, K), 
                                    "assigning variable llh_tmp");
                    } else {
                        {
                        current_statement_begin__ = 175;
                        int t0(0);
                        (void) t0;  // dummy to suppress unused var warning
                        stan::math::fill(t0, std::numeric_limits<int>::min());
                        stan::math::assign(t0,get_base1(get_base1(startstop, t, "startstop", 1), ((ns * 2) - 1), "startstop", 2));
                        current_statement_begin__ = 175;
                        int t1(0);
                        (void) t1;  // dummy to suppress unused var warning
                        stan::math::fill(t1, std::numeric_limits<int>::min());
                        stan::math::assign(t1,get_base1(get_base1(startstop, t, "startstop", 1), (ns * 2), "startstop", 2));
                        current_statement_begin__ = 176;
                        for (int j = 1; j <= K; ++j) {
                            {
                            current_statement_begin__ = 178;
                            int j_(0);
                            (void) j_;  // dummy to suppress unused var warning
                            stan::math::fill(j_, std::numeric_limits<int>::min());
                            stan::math::assign(j_,(state_sigma ? j : 1 ));
                            current_statement_begin__ = 179;
                            stan::model::assign(llh_tmp, 
                                        stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                        normal_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "y"), add(multiply(stan::model::rvalue(x_d_, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "x_d_"), alpha), multiply(stan::model::rvalue(x_e_, stan::model::cons_list(stan::model::index_min_max(t0, t1), stan::model::nil_index_list()), "x_e_"), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "beta"))), get_base1(sigma, j_, "sigma", 1)), 
                                        "assigning variable llh_tmp");
                            }
                        }
                        }
                    }
                }
                current_statement_begin__ = 186;
                stan::model::assign(logalpha, 
                            stan::model::cons_list(stan::model::index_uni((t_ns0 + ((ns - 1) * T))), stan::model::nil_index_list()), 
                            add(stan::math::log(get_base1(pi1, ns, "pi1", 1)), get_base1(get_base1(llh_tmp, ns, "llh_tmp", 1), t_ns0, "llh_tmp", 2)), 
                            "assigning variable logalpha");
                current_statement_begin__ = 187;
                for (int t = (t_ns0 + 1); t <= t_ns1; ++t) {
                    current_statement_begin__ = 188;
                    for (int j = 1; j <= K; ++j) {
                        current_statement_begin__ = 189;
                        stan::model::assign(logalpha, 
                                    stan::model::cons_list(stan::model::index_uni((t + ((ns - 1) * T))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    log_sum_exp(add(add(get_base1(logalpha, ((t + ((ns - 1) * T)) - 1), "logalpha", 1), stan::model::rvalue(logA, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(n_tp), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())))), "logA")), rep_vector(get_base1(get_base1(llh_tmp, (t + ((ns - 1) * T)), "llh_tmp", 1), j, "llh_tmp", 2), K))), 
                                    "assigning variable logalpha");
                    }
                }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t logA_j_2_max__ = K;
                size_t logA_j_1_max__ = K;
                size_t logA_k_0_max__ = T_;
                size_t logA_k_1_max__ = NTP;
                for (size_t j_2__ = 0; j_2__ < logA_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < logA_j_1_max__; ++j_1__) {
                        for (size_t k_1__ = 0; k_1__ < logA_k_1_max__; ++k_1__) {
                            for (size_t k_0__ = 0; k_0__ < logA_k_0_max__; ++k_0__) {
                                vars__.push_back(logA[k_0__][k_1__](j_1__, j_2__));
                            }
                        }
                    }
                }
                size_t beta_j_2_max__ = K;
                size_t beta_j_1_max__ = Mx_e_;
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                        vars__.push_back(beta(j_1__, j_2__));
                    }
                }
                size_t logalpha_j_1_max__ = K;
                size_t logalpha_k_0_max__ = (NS * T);
                for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                        vars__.push_back(logalpha[k_0__](j_1__));
                    }
                }
                size_t llh_tmp_j_1_max__ = K;
                size_t llh_tmp_k_0_max__ = (NS * T);
                for (size_t j_1__ = 0; j_1__ < llh_tmp_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < llh_tmp_k_0_max__; ++k_0__) {
                        vars__.push_back(llh_tmp[k_0__](j_1__));
                    }
                }
                size_t lambda_prime_j_2_max__ = K;
                size_t lambda_prime_j_1_max__ = Mz_;
                size_t lambda_prime_k_0_max__ = K;
                for (size_t j_2__ = 0; j_2__ < lambda_prime_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < lambda_prime_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < lambda_prime_k_0_max__; ++k_0__) {
                            vars__.push_back(lambda_prime[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 279;
            validate_non_negative_index("prS", "K", K);
            validate_non_negative_index("prS", "(NS * T)", (NS * T));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prS((NS * T), Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(prS, DUMMY_VAR__);
            stan::math::fill(prS, DUMMY_VAR__);
            current_statement_begin__ = 280;
            validate_non_negative_index("y_rep", "NT", NT);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_rep(NT);
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 282;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 283;
                stan::model::assign(prS, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            rep_array(0.0, (NS * T)), 
                            "assigning variable prS");
            }
            current_statement_begin__ = 285;
            for (int n = 1; n <= (NS * T); ++n) {
                current_statement_begin__ = 286;
                stan::model::assign(prS, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            softmax(get_base1(logalpha, n, "logalpha", 1)), 
                            "assigning variable prS");
            }
            {
            current_statement_begin__ = 289;
            validate_non_negative_index("sigma_", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_(K);
            stan::math::initialize(sigma_, DUMMY_VAR__);
            stan::math::fill(sigma_, DUMMY_VAR__);
            stan::math::assign(sigma_,(state_sigma ? stan::math::promote_scalar<local_scalar_t__>(to_vector(sigma)) : stan::math::promote_scalar<local_scalar_t__>(rep_vector(get_base1(sigma, 1, "sigma", 1), K)) ));
            current_statement_begin__ = 290;
            for (int ns = 1; ns <= NS; ++ns) {
                {
                current_statement_begin__ = 292;
                int t_ns0(0);
                (void) t_ns0;  // dummy to suppress unused var warning
                stan::math::fill(t_ns0, std::numeric_limits<int>::min());
                stan::math::assign(t_ns0,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 1, "slicer_T", 2));
                current_statement_begin__ = 292;
                int t_ns1(0);
                (void) t_ns1;  // dummy to suppress unused var warning
                stan::math::fill(t_ns1, std::numeric_limits<int>::min());
                stan::math::assign(t_ns1,get_base1(get_base1(slicer_T, ns, "slicer_T", 1), 2, "slicer_T", 2));
                current_statement_begin__ = 293;
                for (int t = t_ns0; t <= t_ns1; ++t) {
                    {
                    current_statement_begin__ = 295;
                    int t0(0);
                    (void) t0;  // dummy to suppress unused var warning
                    stan::math::fill(t0, std::numeric_limits<int>::min());
                    stan::math::assign(t0,get_base1(get_base1(startstop, t, "startstop", 1), ((ns * 2) - 1), "startstop", 2));
                    current_statement_begin__ = 295;
                    int t1(0);
                    (void) t1;  // dummy to suppress unused var warning
                    stan::math::fill(t1, std::numeric_limits<int>::min());
                    stan::math::assign(t1,get_base1(get_base1(startstop, t, "startstop", 1), (ns * 2), "startstop", 2));
                    current_statement_begin__ = 296;
                    int count(0);
                    (void) count;  // dummy to suppress unused var warning
                    stan::math::fill(count, std::numeric_limits<int>::min());
                    stan::math::assign(count,categorical_rng(get_base1(prS, (t + ((ns - 1) * T)), "prS", 1), base_rng__));
                    current_statement_begin__ = 297;
                    for (int t2 = t0; t2 <= t1; ++t2) {
                        current_statement_begin__ = 298;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni(t2), stan::model::nil_index_list()), 
                                    normal_rng((multiply(get_base1(x_d_, t2, "x_d_", 1), alpha) + multiply(get_base1(x_e_, t2, "x_e_", 1), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(count), stan::model::nil_index_list())), "beta"))), get_base1(sigma_, count, "sigma_", 1), base_rng__), 
                                    "assigning variable y_rep");
                    }
                    }
                }
                }
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 279;
            size_t prS_j_1_max__ = K;
            size_t prS_k_0_max__ = (NS * T);
            for (size_t j_1__ = 0; j_1__ < prS_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prS_k_0_max__; ++k_0__) {
                    vars__.push_back(prS[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 280;
            size_t y_rep_j_1_max__ = NT;
            for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
                vars__.push_back(y_rep(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_msm_constant_continuous";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi1_j_1_max__ = K;
        size_t pi1_k_0_max__ = NS;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_1_max__ = K;
        size_t A_k_0_max__ = (tvtp ? T : 1 );
        size_t A_k_1_max__ = NTP;
        size_t A_k_2_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        size_t delta_k_0_max__ = (tvtp * Mz_);
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = (tvtp * pp2_);
        size_t gamma_k_1_max__ = (K * tvtp);
        for (size_t k_1__ = 0; k_1__ < gamma_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_k_0_max__ = (tvtp * K);
        size_t eta_k_1_max__ = pp3_;
        size_t eta_k_2_max__ = (K - 1);
        for (size_t k_2__ = 0; k_2__ < eta_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t alpha_j_1_max__ = Mx_d_;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_un_j_1_max__ = K;
        size_t beta_un_k_0_max__ = Mx_e_un;
        for (size_t j_1__ = 0; j_1__ < beta_un_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_un_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_un" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_ord_j_1_max__ = K;
        size_t beta_ord_k_0_max__ = Mx_e_ord;
        for (size_t j_1__ = 0; j_1__ < beta_ord_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_ord_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_ord" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = K_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logA_j_2_max__ = K;
            size_t logA_j_1_max__ = K;
            size_t logA_k_0_max__ = T_;
            size_t logA_k_1_max__ = NTP;
            for (size_t j_2__ = 0; j_2__ < logA_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < logA_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < logA_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < logA_k_0_max__; ++k_0__) {
                            param_name_stream__.str(std::string());
                            param_name_stream__ << "logA" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                            param_names__.push_back(param_name_stream__.str());
                        }
                    }
                }
            }
            size_t beta_j_2_max__ = K;
            size_t beta_j_1_max__ = Mx_e_;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logalpha_j_1_max__ = K;
            size_t logalpha_k_0_max__ = (NS * T);
            for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logalpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t llh_tmp_j_1_max__ = K;
            size_t llh_tmp_k_0_max__ = (NS * T);
            for (size_t j_1__ = 0; j_1__ < llh_tmp_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < llh_tmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "llh_tmp" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_prime_j_2_max__ = K;
            size_t lambda_prime_j_1_max__ = Mz_;
            size_t lambda_prime_k_0_max__ = K;
            for (size_t j_2__ = 0; j_2__ < lambda_prime_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_prime_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < lambda_prime_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "lambda_prime" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t prS_j_1_max__ = K;
        size_t prS_k_0_max__ = (NS * T);
        for (size_t j_1__ = 0; j_1__ < prS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_rep_j_1_max__ = NT;
        for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi1_j_1_max__ = (K - 1);
        size_t pi1_k_0_max__ = NS;
        for (size_t j_1__ = 0; j_1__ < pi1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pi1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_1_max__ = (K - 1);
        size_t A_k_0_max__ = (tvtp ? T : 1 );
        size_t A_k_1_max__ = NTP;
        size_t A_k_2_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            for (size_t k_2__ = 0; k_2__ < A_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < A_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < A_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "A" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1 << '.' << j_1__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        size_t delta_k_0_max__ = (tvtp * Mz_);
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_k_0_max__ = (tvtp * pp2_);
        size_t gamma_k_1_max__ = (K * tvtp);
        for (size_t k_1__ = 0; k_1__ < gamma_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t eta_k_0_max__ = (tvtp * K);
        size_t eta_k_1_max__ = pp3_;
        size_t eta_k_2_max__ = (K - 1);
        for (size_t k_2__ = 0; k_2__ < eta_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < eta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t alpha_j_1_max__ = Mx_d_;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_un_j_1_max__ = K;
        size_t beta_un_k_0_max__ = Mx_e_un;
        for (size_t j_1__ = 0; j_1__ < beta_un_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_un_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_un" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_ord_j_1_max__ = K;
        size_t beta_ord_k_0_max__ = Mx_e_ord;
        for (size_t j_1__ = 0; j_1__ < beta_ord_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_ord_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_ord" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_k_0_max__ = K_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logA_j_2_max__ = K;
            size_t logA_j_1_max__ = K;
            size_t logA_k_0_max__ = T_;
            size_t logA_k_1_max__ = NTP;
            for (size_t j_2__ = 0; j_2__ < logA_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < logA_j_1_max__; ++j_1__) {
                    for (size_t k_1__ = 0; k_1__ < logA_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < logA_k_0_max__; ++k_0__) {
                            param_name_stream__.str(std::string());
                            param_name_stream__ << "logA" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                            param_names__.push_back(param_name_stream__.str());
                        }
                    }
                }
            }
            size_t beta_j_2_max__ = K;
            size_t beta_j_1_max__ = Mx_e_;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logalpha_j_1_max__ = K;
            size_t logalpha_k_0_max__ = (NS * T);
            for (size_t j_1__ = 0; j_1__ < logalpha_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logalpha_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logalpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t llh_tmp_j_1_max__ = K;
            size_t llh_tmp_k_0_max__ = (NS * T);
            for (size_t j_1__ = 0; j_1__ < llh_tmp_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < llh_tmp_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "llh_tmp" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_prime_j_2_max__ = K;
            size_t lambda_prime_j_1_max__ = Mz_;
            size_t lambda_prime_k_0_max__ = K;
            for (size_t j_2__ = 0; j_2__ < lambda_prime_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_prime_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < lambda_prime_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "lambda_prime" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t prS_j_1_max__ = K;
        size_t prS_k_0_max__ = (NS * T);
        for (size_t j_1__ = 0; j_1__ < prS_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prS_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prS" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_rep_j_1_max__ = NT;
        for (size_t j_1__ = 0; j_1__ < y_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_msm_constant_continuous_namespace::model_msm_constant_continuous stan_model;
#endif
